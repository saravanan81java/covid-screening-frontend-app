import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Submission } from './submission';

interface PostRequestDataType {
  name: string | undefined;
  phone: string | undefined;
  email: string | undefined;
  consentAccepted: boolean | undefined;
  questionandAnswers: { questionId: string; answer: any }[];
}

const QUESTION_ID_KEY_MAP = [
  { client: 'SymptomsQ', server: 'experiencing-symptoms' },
  { client: 'WaitingForResultsQ', server: 'waiting-for-covid-test-results' },
  { client: 'DoctorIsolationQ', server: 'isolation-by-doctor' },
  { client: 'CloseContactQ', server: 'close-contact-with-active-covid' },
  { client: 'TravelQuarantineQ', server: 'travel-outside-canada' },
  {
    client: 'CloseContactQuarantineQ',
    server: 'close-contact-with-required-quarantine',
  },
];

@Injectable({
  providedIn: 'root',
})
export class SubmissionService {
  private submissionURL =
    'https://25pdaq309i.execute-api.ca-central-1.amazonaws.com/dev/covidscreening';

  constructor(private http: HttpClient) {}

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {
      console.error(operation, error); // log to console instead
      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  /**
   * Handle Http operation that failed.
   * @param value - data being checked
   */
  private isDefined(value: any) {
    return !(typeof value === 'undefined');
  }

  /**
   * Format the frontend data to match the pattern expected by the backend
   * @param rawData - data being re-formatted
   */
  private formatData(rawData: Submission): any {
    let formattedData: PostRequestDataType = {
      name: rawData.PersonalInfoQ?.fullName,
      phone: rawData.PersonalInfoQ?.phone,
      email: rawData.PersonalInfoQ?.email,
      consentAccepted: rawData.ConsentQ,
      questionandAnswers: [],
    };

    QUESTION_ID_KEY_MAP.forEach((questionKeys) => {
      const submissionKey = questionKeys.client as keyof Submission;
      this.isDefined(rawData[submissionKey]) &&
        formattedData.questionandAnswers.push({
          questionId: questionKeys.server,
          answer: rawData[submissionKey],
        });
    });

    return formattedData;
  }

  /**
   * Send a POST request to save data to DB
   * @param submission - data generated by the frontend
   */
  saveSubmission(submission: Submission): Observable<any> {
    const body = this.formatData(submission);

    return this.http
      .post<any>(this.submissionURL, body)
      .pipe(catchError(this.handleError<any>('saveSubmission', body)));
  }
}
